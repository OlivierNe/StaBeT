@model StageopdrachtListVM

<div id="grid-tableDiv">
    @Html.Grid(Model.Stageopdrachten).Columns(columns =>
    {
        columns.Add(so => so.Titel).Titled("Titel")
            .Encoded(false).Sanitized(false)
            .RenderValueAs(so =>
                Html.ActionLink(so.Titel,
                "Details", new { id = so.Id, overzicht = Model.Overzicht })).SetWidth(300);
        if (Model.ToonBedrijf)
        {
            columns.Add(so => so.Bedrijf.Naam).Titled("Bedrijf")
                .Encoded(false).Sanitized(false)
                .RenderValueAs(so =>
                {
                    var locatie = !string.IsNullOrWhiteSpace(so.Gemeente) ? " - " + so.Gemeente :
                        !string.IsNullOrWhiteSpace(so.Bedrijf.Gemeente) ? " - " + so.Bedrijf.Gemeente : "";
                    return Html.ActionLink(so.Bedrijf.Naam + locatie,
                        "Details", "Bedrijf", new { so.Bedrijf.Id }, new { });
                });
        }
        if (Model.ToonBegeleider)
        {
            columns.Add(so => so.Stagebegeleider.Familienaam).Titled("Begeleider")
                .Encoded(false).Sanitized(false)
                .RenderValueAs(so =>
                {
                    if (so.Stagebegeleider != null)
                    {
                        return Html.ActionLink(so.Stagebegeleider.Naam, "Details", "Begeleider", new { so.Stagebegeleider.Id }, new { });
                    }
                    return new MvcHtmlString("");
                }).Sortable(true).ThenSortBy(so => so.Stagebegeleider.Voornaam);
        }
        if (Model.ToonStudenten)
        {
            columns.Add().Titled("studenten")
                .Sanitized(false).Encoded(false)
                .RenderValueAs(so =>
                {
                    string retVal = "<ul>";
                    foreach (var stage in so.Stages)
                    {
                        retVal += "<li>" + Html.ActionLink(stage.Student.Naam,
                            "Details", "Student", new { id = stage.Student.Id }, new { }) + "</li>";
                    }
                    retVal += "</ul>";
                    return retVal;
                }
                ).SetWidth(200);
        }
        columns.Add(so => so.Specialisatie);

        if (Model.ToonSemester)
        {
            columns.Add(so => so.Semester1).Titled("Semester")
                .RenderValueAs(so => so.Semester).Sortable(true).ThenSortBy(so => so.Semester2);
        }
        if (Model.ToonAcademiejaar)
        {
            columns.Add(so => so.Academiejaar).Titled("Academiejaar");
        }

        if (Model.ToonAantalStudenten)
        {
            columns.Add(so => so.AantalStudenten).Titled("Aantal studenten")
                .RenderValueAs(so => so.AantalToegewezenStudenten() + "/" + so.AantalStudenten).ThenSortBy(so => so.Stages.Count);
        }

        if (Model.ToonStatus)
        {
            columns.Add(so => so.Status).Titled("Status").Sanitized(false).Encoded(false)
                .RenderValueAs(so => Html.DisplayFor(model => so.Status)).SetWidth(130);
        }
        if (Model.ToonOordelen)
        {
            columns.Add().Sanitized(false).Encoded(false)
                .RenderValueAs(so => so.IsGoedgekeurd() == false
                    ? Html.ActionLink("Goedkeuren", "StageopdrachtGoedkeuren", new { id = so.Id }, new { @class = "btn btn-default" }) : MvcHtmlString.Empty);
            columns.Add().Sanitized(false).Encoded(false)
                .RenderValueAs(so => so.IsAfgekeurd() == false
                    ? Html.ActionLink("Afkeuren", "StageopdrachtAfkeuren", new { id = so.Id }, new { @class = "btn btn-default" }) : MvcHtmlString.Empty);
        }
        if (Model.ToonDossierIndienen)
        {
            columns.Add().Sanitized(false).Encoded(false)
                .RenderValueAs(so =>
                {
                    if (Model.StageIdDossierIngediend == null)
                    {
                        return Html.ActionLink("Stagedossier ingediend", "AanduidenDossierIngediend",
                            new { so.Id }, new { @class = "btn btn-default", title = "Aanduiden dat mijn stagedossier voor deze stageopdracht is ingediend" });
                    }
                    if (so.Id == Model.StageIdDossierIngediend)
                    {
                        return new MvcHtmlString("<div class='text text-info'>Stagedossier " + Model.CurrentStudentStagedossierStatus + "</div>");
                    }
                    return MvcHtmlString.Empty;
                });
        }
    }).WithPaging(10).Sortable().EmptyText("Geen stageopdrachten gevonden")
</div>